import { Component, createSignal, createEffect, onMount } from 'solid-js';
import { useIntl } from '@cookbook/solid-intl';
import { useSettingsContext } from '../contexts/SettingsContext';
//import { useProfileContext } from '../contexts/ProfileContext';
//import { useAccountContext } from '../contexts/AccountContext';

import Wormhole from '../components/Wormhole/Wormhole';
import Search from '../components/Search/Search';
import ExternalLink from '../components/ExternalLink/ExternalLink';
import PageTitle from '../components/PageTitle/PageTitle';
import PageCaption from '../components/PageCaption/PageCaption';
import StickySidebar from '../components/StickySidebar/StickySidebar';

/*
import gitHubLight from '../assets/icons/github_light.svg';
import gitHubDark from '../assets/icons/github.svg';
import copyNoteLink from '../assets/icons/bookmark_empty.svg';
*/
const gitHubLight = 'https://cdnwin.maganszovetseg.net/src/assets/icons/github_light.svg';
const gitHubDark = 'https://cdnwin.maganszovetseg.net/src/assets/icons/github.svg';
const copyNoteLink = 'https://cdnwin.maganszovetseg.net/src/assets/icons/bookmark_empty.svg';

import { downloads as t } from '../translations';
import styles from './Downloads.module.scss';
import { PrimalUser } from '../types/primal';

// Extend the PrimalUser type to include custom metadata fields
/*
type ExtendedPrimalUser = {
  msn_isMediumSupported?: string;
  msn_isOptimumSupported?: string;
  msn_WantsToHelp?: string;
} & PrimalUser;
*/
const Downloads: Component = () => {
  const intl = useIntl();
  const settings = useSettingsContext();

  /*
  const profile = useProfileContext();
  const account = useAccountContext();
*/


  // State for Button 2 and Button 3
  const [secondButtonActive, setSecondButtonActive] = createSignal(false);
  const [thirdButtonActive, setThirdButtonActive] = createSignal(false);
  // State for Long Button
  const [longButtonActive, setLongButtonActive] = createSignal(false);
  // Derived state to check if both Button 2 and Button 3 are active
  const [allButtonsActive, setAllButtonsActive] = createSignal(false);

 // State for notification
  const [notification, setNotification] = createSignal<string | null>(null);

  // Update allButtonsActive whenever secondButtonActive or thirdButtonActive changes
  /*
  createEffect(() => {
    if (profile?.userProfile) {
      const metadata = profile.userProfile as ExtendedPrimalUser;
      const mediumActive = metadata.msn_isMediumSupported === "true";
      const optimumActive = metadata.msn_isOptimumSupported === "true";
  
      setAllButtonsActive(mediumActive && optimumActive); // Derived state
      setSecondButtonActive(mediumActive);
      setThirdButtonActive(optimumActive);
      setLongButtonActive(metadata.msn_WantsToHelp === "true");
  
      console.log("√∞≈∏‚Äù‚Äû Syncing button states with profile metadata:", {
        secondButtonActive: mediumActive,
        thirdButtonActive: optimumActive,
        longButtonActive: metadata.msn_WantsToHelp === "true",
      });
    }
  });
*/

  // Logging profile fetch status
  /*
  console.log('Step 1: Checking if profile context is available...');
  if (!profile) {
    console.error('Step 1: Profile context is not available. Check the ProfileContext provider.');
    return null;
  }
  console.log('Step 1: Profile context is available.');
*/


  // Fetch profile data on mount
  /*
  createEffect(() => {
    if (account?.publicKey && !profile?.userProfile && !profile?.isLoading) {
      console.log('Step 2: Fetching profile data...');
      profile.actions.setProfileKey(account.publicKey);
      console.log('Step 2: Profile data fetched successfully.');
    }
  });
*/

  // Log metadata fields// Profile Data and Metadata Sync
  /*
  createEffect(() => {
    if (!profile?.userProfile) {
      console.warn("√¢≈°¬†√Ø¬∏  Profile data is missing! Requesting update...");
      profile.actions.setProfileKey(account?.publicKey);
  
      // Ensure metadata fields are initialized
      const checkMetadata = async (maxRetries = 20, retryDelay = 1000) => {
        let retries = 0;
  
        while (retries < maxRetries) {
          await new Promise((resolve) => setTimeout(resolve, retryDelay)); // Wait before checking
          const metadata = profile?.userProfile as ExtendedPrimalUser;
  
          if (
            metadata?.msn_isMediumSupported !== undefined &&
            metadata?.msn_isOptimumSupported !== undefined &&
            metadata?.msn_WantsToHelp !== undefined
          ) {
            console.log("√¢≈ì‚Ä¶ Metadata fields are now available.");
            return; // Exit if all metadata fields are defined
          }
  
          retries++;
          console.log(`√∞≈∏‚Äù‚Äû Retry ${retries}/${maxRetries}: Waiting for metadata fields...`);
          await profile.actions.setProfileKey(account?.publicKey); // Re-fetch profile data
        }
  
        console.error("√¢ ≈í Failed to fetch metadata fields after multiple retries.");
      };
  
      checkMetadata(); // Start checking metadata fields
    }
  });
*/
/*
  createEffect(() => {
    if (profile?.userProfile) {
      const metadata = profile.userProfile as ExtendedPrimalUser;
      console.log("üîÑ Syncing button states with profile metadata:", {
        msn_isMediumSupported: metadata.msn_isMediumSupported,
        msn_isOptimumSupported: metadata.msn_isOptimumSupported,
        msn_WantsToHelp: metadata.msn_WantsToHelp,
      });
  
      setSecondButtonActive(metadata.msn_isMediumSupported === "true");
      setThirdButtonActive(metadata.msn_isOptimumSupported === "true");
      setLongButtonActive(metadata.msn_WantsToHelp === "true");
    }
  });
*/
  /*
  const waitForProfileData = async () => {
    console.log("√∞≈∏‚Äù‚Äû Step 4: Waiting for profile data to load...");
    const interval = 500; // Check every 500ms
    return new Promise((resolve) => {
      const intervalId = setInterval(() => {
        if (profile?.userProfile && account?.publicKey) {
          console.log("√¢≈ì‚Ä¶ Step 4: Profile data is now available.");
          clearInterval(intervalId);
          resolve(profile.userProfile);
        }
      }, interval);
    });
  };
*/





  // Initialize metadata fields and set button states on page load
/* 
  onMount(async () => {
    console.log('√¢ ¬≥ Step 4: Waiting for profile data to load...');
    if (!profile?.userProfile || !account?.publicKey) {
      console.warn("√¢≈°¬†√Ø¬∏  Step 4: Profile data or account public key is missing! Skipping metadata check...");
      return;
    }
  
    console.log("√¢≈ì‚Ä¶ Step 4: Profile data is available. Checking metadata fields...");
    const metadata = profile.userProfile as ExtendedPrimalUser;
    let needsUpdate = false;
    const updatedProfile = { ...metadata };
  
    // Initialize missing metadata fields
    if (metadata.msn_isMediumSupported === undefined) {
      updatedProfile.msn_isMediumSupported = "false";
      needsUpdate = true;
    }
    if (metadata.msn_isOptimumSupported === undefined) {
      updatedProfile.msn_isOptimumSupported = "false";
      needsUpdate = true;
    }
    if (metadata.msn_WantsToHelp === undefined) {
      updatedProfile.msn_WantsToHelp = "false";
      needsUpdate = true;
    }
  
    if (needsUpdate) {
      console.log("√∞≈∏‚Äú¬° Step 4: Saving missing metadata fields:", updatedProfile);
      await profile.actions.updateProfile(JSON.stringify(updatedProfile));
      console.log("√∞≈∏‚Äù‚Äû Step 4: Re-fetching profile after metadata save...");
      await profile.actions.setProfileKey(account.publicKey);
  
      // Wait for the profile to reflect the changes
      await waitForMetadataToPropagate("msn_isMediumSupported", "true");
    }
  
    // Sync button states after ensuring metadata is initialized
    const updatedMetadata = profile.userProfile as ExtendedPrimalUser;
    setSecondButtonActive(updatedMetadata.msn_isMediumSupported === "true");
    setThirdButtonActive(updatedMetadata.msn_isOptimumSupported === "true");
    setLongButtonActive(updatedMetadata.msn_WantsToHelp === "true");
  
    console.log("√¢≈ì‚Ä¶ Step 4: Metadata ensured & buttons updated:", {
      secondButtonActive: secondButtonActive(),
      thirdButtonActive: thirdButtonActive(),
      longButtonActive: longButtonActive(),
    });
  });
*/

/*
  const waitForMetadataToPropagate = async (
    key: string,
    value: string,
    maxRetries = 10,
    retryDelay = 500
  ): Promise<boolean> => { // Explicitly define the return type
    let retries = 0;
  
    while (retries < maxRetries) {
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
      const metadata = profile?.userProfile as ExtendedPrimalUser;
  
      if ((metadata as any)[key] === value) {
        console.log(`‚úÖ ${key} propagated successfully with value: ${value}`);
        return true; // Return true if the metadata matches the expected value
      }
  
      retries++;
      console.log(`üîÑ Retry ${retries}/${maxRetries}: Waiting for ${key}=${value}`);
    }
  
    console.error(`‚ùå Failed to propagate ${key} after ${maxRetries} retries.`);
    return false; // Return false if the retries are exhausted
  };
*/


// Handle Button 2 Click
/*
const handleSecondButtonClick = async () => {


  const newState = !secondButtonActive();
  console.log("√∞≈∏‚Äì¬±√Ø¬∏  Step 5: Updating msn_isMediumSupported to:", newState);

  if (!profile?.userProfile || !account?.publicKey) {
    console.error("√¢ ≈í Step 5: Profile data or account public key is missing! Cannot update.");
    return;
  }

  const metadata = profile.userProfile as ExtendedPrimalUser;
  const updatedProfile = { ...metadata, msn_isMediumSupported: newState ? "true" : "false" };

  try {
  
    console.log("√∞≈∏‚Äú¬° Step 5: Sending updated profile:", updatedProfile);
    await profile.actions.updateProfile(JSON.stringify(updatedProfile));

     //Wait for the updated metadata to reflect
    const success = await waitForMetadataToPropagate("msn_isMediumSupported", newState ? "true" : "false");
    if (success) {
      //setSecondButtonActive(newState); // Update the button state only after confirmation
    }
  } catch (error) {
    console.error("‚ùå Step 5: Failed to update msn_isMediumSupported:", error);
  }
};
*/



  // Update metadata when Button 3 is clicked
/*
  const handleThirdButtonClick = async () => {
    const newState = !thirdButtonActive();
    console.log('Step 6: Attempting to update msn_isOptimumSupported to:', newState);
  
    // Ensure Button 2 is enabled before allowing Button 3 to be enabled
    if (newState && !secondButtonActive()) {
      console.error("‚ùå Step 6: Button 2 (msn_isMediumSupported) must be enabled before enabling Button 3.");
      return;
    }
  
    if (!profile?.userProfile || !account?.publicKey) {
      console.error("‚ùå Step 6: Profile data or account public key is missing! Cannot update.");
      return;
    }
  
    const metadata = profile.userProfile as ExtendedPrimalUser;
    const updatedProfile = { ...metadata, msn_isOptimumSupported: newState ? "true" : "false" };
  
    try {
      console.log("üì§ Step 6: Sending updated profile:", updatedProfile);
      await profile.actions.updateProfile(JSON.stringify(updatedProfile));
  
      // Wait for the updated metadata to propagate
      const success = await waitForMetadataToPropagate("msn_isOptimumSupported", newState ? "true" : "false");
      if (success) {
        console.log('‚úÖ Step 6: msn_isOptimumSupported updated successfully to:', newState);
        setThirdButtonActive(newState); // Update the button state only after confirmation
      }
    } catch (error) {
      console.error('‚ùå Step 6: Failed to update msn_isOptimumSupported:', error);
    }
  };
*/




  // Update metadata when Long Button is clicked
/*
  const handleLongButtonClick = async () => {
    const newState = !longButtonActive();
    console.log('Step 7: Attempting to update msn_WantsToHelp to:', newState);
  
    if (!profile?.userProfile || !account?.publicKey) {
      console.error("√¢ ≈í Step 7: Profile data or account public key is missing! Cannot update.");
      return;
    }
  
    const metadata = profile.userProfile as ExtendedPrimalUser;
    const updatedProfile = { ...metadata, msn_WantsToHelp: newState ? "true" : "false" };
  
    try {
      console.log("√∞≈∏‚Äú¬° Step 7: Sending updated profile:", updatedProfile);
      await profile.actions.updateProfile(JSON.stringify(updatedProfile));
  
      // Wait for the updated metadata to propagate
      await waitForMetadataToPropagate("msn_WantsToHelp", newState ? "true" : "false");
  
      console.log('Step 7: msn_WantsToHelp updated successfully to:', newState);
      setLongButtonActive(newState); // Update the button state only after confirmation
    } catch (error) {
      console.error('Step 7: Failed to update msn_WantsToHelp:', error);
    }
  };

*/

  

  // Handle the special case where the long button disappears
/*
  createEffect(() => {
    if (!allButtonsActive() && longButtonActive()) {
        console.log('Step 8: Long button disappeared. Attempting to set msn_WantsToHelp to false.');

        if (profile?.userProfile) {
            console.log("üîÑ Step 8: Current Profile Metadata (Before Update):", profile.userProfile);
            
            const metadata = profile.userProfile as ExtendedPrimalUser;
            const updatedProfile = {
                ...metadata,
                msn_WantsToHelp: 'false',
            };

            try {
                profile.actions.updateProfile(JSON.stringify(updatedProfile));
                console.log("‚úÖ Step 8: msn_WantsToHelp set to false successfully.");
                setLongButtonActive(false);
            } catch (error) {
                console.error("‚ùå Step 8: Failed to set msn_WantsToHelp to false:", error);
            }
        }
    }
});
*/

  // updating CreateEffect to not depend on the Metadata update
  createEffect(() => {
    setAllButtonsActive(secondButtonActive() && thirdButtonActive());
  });


  return (
    <div class={styles.downloadsContainer}>
      <Wormhole to="search_section">
        <Search />
      </Wormhole>

      <StickySidebar>
        <div class={styles.downloadsSidebar}>
          <div class={styles.title}>
            {intl.formatMessage(t.links.title)}
          </div>

          <div class={styles.list}>
            <ExternalLink
              darkIcon={gitHubLight}
              lightIcon={gitHubDark}
              label={intl.formatMessage(t.links.webApp)}
              href='https://github.com/PrimalHQ/primal-web-app'
            />
            
            <br /><br />

            <div class={styles.title}>
              {intl.formatMessage(t.links.title3)}
            </div>


            <ExternalLink
              darkIcon={copyNoteLink}
              label={intl.formatMessage(t.links.TermsDoc)}
              href="./Terms"
            />
            <ExternalLink
              darkIcon={copyNoteLink}
              label={intl.formatMessage(t.links.PrivacyDoc)}
              href="./Privacy"
            />
            <br /><br />

            <div class={styles.title}>
             {intl.formatMessage(t.links.title4)}
            </div>
            <ExternalLink
              darkIcon={copyNoteLink}
              label={intl.formatMessage(t.links.IntroDoc)}
              href="https://mega.nz/file/UuwRhZ5Q#T_0ZCfvPwxrga2ioW0gj7zaKBp0X7xyiivPvKGmJLcw"
            />
            <br /><br />

            <div class={styles.title}>
              {intl.formatMessage(t.links.title2)}
            </div>

            <div class={styles.list}>
              {/* Donation Button */}
              <div class={styles.donationButtonContainer}>
                <button
                  class={styles.secondaryButton}
                  onClick={() => window.open('https://www.donably.com/maganszovetseg', '_blank')}
                >
                  Forintban k√°rty√°val
                </button>
              </div>

              {/* Bitcoin Button */}
              <div class={styles.bitcoinButtonContainer}>
                <button
                  class={styles.bitcoinButton}
                  onClick={() => navigator.clipboard.writeText('bc1qry8c2sdqg2sq80gle2d0l7e6gy0hx2pxzlzmv8')}
                >
                  Bitcoin c√≠m m√°sol√°sa
                </button>
              </div>
            </div>
          </div>
        </div>
      </StickySidebar>

      <PageTitle title={intl.formatMessage(t.title)} />
      <PageCaption title={intl.formatMessage(t.title)} />

      {/* Content Frame */}
      <div class={styles.frameContainer}>
        <div class={styles.centeredContent}>
          <div class={styles.inputLabel}>
            <p style={{ "font-size": "100%", "line-height": "1.4", "text-align": "justify" }}>
              A <strong>Mag√°nSz√∂vets√©g</strong> egy mag√°njog alapj√°n szervez≈ëd≈ë <strong>mag√°nemberek sz√∂vets√©ge</strong>, kik kijelentik, hogy √©l≈ë emberk√©nt <strong>az √©letet, a szabads√°got √©s a b√©k√©t</strong> t√°mogatj√°k.
              <br /><br />Mag√°nSz√∂vets√©g.Net fi√≥kod l√©trehoz√°s√°val kijelented, hogy <strong>egyet√©rtesz √©rt√©krend√ºnkkel</strong>.
              Ennek l√©nyege, hogy √©bers√©ggel √©s √∂r√∂mteli l√°t√°sm√≥ddal t√°mogatjuk a pozitivit√°st, a pozit√≠v √©rt√©keket.
              A negativit√°st nem t√°mogatjuk. R√°mutatunk annyira finoman √©s intelligensen, ahogy lehets√©ges,
              de azon t√∫l nem foglalkozunk vele. Mi egyszer≈±en tessz√ºk a saj√°t dolgunkat a vil√°g j√∂v≈ëje √©s minden l√©ny jav√°ra.
              <br /><br />Az <strong>I. √ârt√©krend MINIMUM</strong>, melyben mindannyian egyet√©rt√ºnk a Mag√°nSz√∂vets√©g.Net-en. Ezt √≠rod al√° digit√°lisan, amikor
              l√©trehozod a fi√≥kodat a regisztr√°ci√≥kor. A II. √ârt√©krend M√âDIUM √©s III. √ârt√©krend OPTIMUMOT opcion√°lisan elfogadhatod.
              Amennyiben let√∂lt√∂tted √©s egyet√©rtesz vel√ºk, r√©szt vehetsz munk√°nkban, ak√°r region√°lis nagyk√∂vetk√©nt. B√°rmilyen nagyszer≈± k√∂z√∂ss√©gnek is vagy tagja, ≈ërizd meg tags√°god! Minden magyar k√∂z√∂ss√©g√©rt is teszel egyben, amikor vel√ºk egy√ºtt a Mag√°nSz√∂vets√©get is t√°mogatod egyben.
            </p>
          </div>

          {/* Download Section */}
          <div class={styles.qrWrapper}>
            {/* √ârt√©krend MINIMUM */}
            <div class={styles.qrCode}>
            <a href="https://mega.nz/file/JyYFiTqL#daaSm0WobM1zxDqNxBwzZdrKLsqsiTaDaDioM1bH-1U" target="_blank" rel="noopener noreferrer">
                <img
                  // src="/icons/DownloadPdf_nh.png"
                  src="https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf_nh.png"
                  width={100}
                  alt="T√∂ltsd le a PDF-et!"
                  /*
                  onMouseEnter={(e) => e.currentTarget.src = "/icons/DownloadPdf.png"}
                  onMouseLeave={(e) => e.currentTarget.src = "/icons/DownloadPdf_nh.png"}
                  */
                  onMouseEnter={(e) => e.currentTarget.src = "https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf.png"}
                  onMouseLeave={(e) => e.currentTarget.src = "https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf_nh.png"}
                />
              </a>
              <div class={styles.qrCaption}>
                <strong>I. √ârt√©krend MINIMUM</strong>
              </div>

              {/* Button 1 (Always Active and Disabled) */}
              <div class={`${styles.slideButtonContainer} ${styles.active}`}>
                <div class={styles.slideButton}>
                  <span class={styles.slideButtonText}>Egyet√©rtek</span>
                </div>
              </div>
            </div>

            {/* √ârt√©krend M√âDIUM */}
            <div class={styles.qrCode}>
            <a href="https://mega.nz/file/Ynxg2RxB#jPUlblTQcMveZrFnBG545brZZQlvSSjc6Sjgy2iBpmg" target="_blank" rel="noopener noreferrer">
                <img
                 // src="/icons/DownloadPdf_nh.png"
                  src="https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf_nh.png"
                  width={100}
                  alt="T√∂ltsd le a PDF-et!"
                  /*
                  onMouseEnter={(e) => e.currentTarget.src = "/icons/DownloadPdf.png"}
                  onMouseLeave={(e) => e.currentTarget.src = "/icons/DownloadPdf_nh.png"}
                  */
                  onMouseEnter={(e) => e.currentTarget.src = "https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf.png"}
                  onMouseLeave={(e) => e.currentTarget.src = "https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf_nh.png"}

                />
              </a>
              <div class={styles.qrCaption}>
                <strong>II. √ârt√©krend M√âDIUM</strong>
              </div>

              {/* Button 2 (Clickable) */}
              <div
                class={`${styles.slideButtonContainer} ${secondButtonActive() ? styles.active : ''}`}
                //onClick={handleSecondButtonClick} //no action regarding Metadata
                onClick={() => setSecondButtonActive(!secondButtonActive())} // Toggle the state
              >
                <div class={styles.slideButton}>
                  <span class={styles.slideButtonText}>Egyet√©rtek</span>
                </div>
              </div>
            </div>

            {/* √ârt√©krend OPTIMUM */}
            <div class={styles.qrCode}>
            <a href="https://mega.nz/file/InhFgToY#6aO_l2iajc86HcqoVuCFEfno37RMTR7N1Ud3k6J9aN8" target="_blank" rel="noopener noreferrer">
                <img
                  //src="/icons/DownloadPdf_nh.png"
                  src="https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf_nh.png"
                  width={100}
                  alt="T√∂ltsd le a PDF-et!"
                  /*
                  onMouseEnter={(e) => e.currentTarget.src = "/icons/DownloadPdf.png"}
                  onMouseLeave={(e) => e.currentTarget.src = "/icons/DownloadPdf_nh.png"}
                  */
                  onMouseEnter={(e) => e.currentTarget.src = "https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf.png"}
                  onMouseLeave={(e) => e.currentTarget.src = "https://cdnwin.maganszovetseg.net/public/icons/DownloadPdf_nh.png"}

                />
              </a>
              <div class={styles.qrCaption}>
                <strong>III. √ârt√©krend OPTIMUM</strong>
              </div>

              {/* Button 3 (Clickable) */}
              <div
                class={`${styles.slideButtonContainer} ${thirdButtonActive() ? styles.active : ''}`}
                //onClick={handleThirdButtonClick} //no action regarding Metadata
                onClick={() => {
                  if (secondButtonActive()) { // Only allow toggling if Button 2 is active
                    setThirdButtonActive(!thirdButtonActive());
                  } else {
                    console.log("‚ùå Button 2 must be enabled before enabling Button 3.");
                    setNotification("‚ùå El≈ëbb a M√âDIUM-ot kell elfogadni.");
                    setTimeout(() => setNotification(null), 3000); // Clear the notification after 3 seconds
                  }
                }}
                >
                <div class={styles.slideButton}>
                  <span class={styles.slideButtonText}>Egyet√©rtek</span>
                </div>
              </div>
            </div>
          </div>

          {/* Long Button (Conditionally Rendered) */}
{/* Long Button (Conditionally Rendered) */}
{/* Long Button (Conditionally Rendered) */}
{allButtonsActive() && (
  <div class={styles.fullWidthButtonContainer}>
    <div class={styles.buttonLinkWrapper}> {/* New wrapper to align both elements */}
      <button
        class={`${styles.slideButton} ${longButtonActive() ? styles.active : ''}`}
        onClick={() => setLongButtonActive(!longButtonActive())} // Toggle the state
      >
        <span class={styles.slideButtonText}>
          {longButtonActive()
            ? <>K√∂sz√∂nj√ºk, hogy seg√≠tesz! L√©gy kedves √≠rj egy √ºzenetet a Mag√°nSz√∂vets√©g √úgyf√©lszolg√°latnak, kifejtve hogy miben vagy j√≥-, miben tudsz/ szeretn√©l seg√≠teni! üôè</>
            : <>IGEN! Szeretn√©k seg√≠teni is! Felaj√°nlok id≈ëmb≈ël, energia-t√∂bbletemb≈ël, hogy egy jobb vil√°got teremts√ºnk mindannyiunk sz√°m√°ra! [KATT]</>}
        </span>
      </button>

      {/* Ensure link box is aligned and sized like button */}

      {longButtonActive() && (
        <div class={styles.inputLabel}>
         <div class={styles.linkBox}>
          <a 
            href="https://maganszovetseg.net/p/npub140ucqkum24q9skra07fcac449jxyragut5c3ssk6qthma3fvcl2svfvky2" 
            target="_blank" 
            rel="noopener noreferrer"
          >
            √çrok a Mag√°nSz√∂vets√©g √úgyf√©lszolg√°latnak! [KATT]
          </a>
         </div>
        </div>
      )}



    </div>
  </div>
)}







        </div>
      </div>
    </div>
  );
};

export default Downloads;